
//{ ====================================================================== }

Blog{
Title{ ALIFE: Quest for Vision }
Date{ 2007-1-3 }
P{
My little alife simulator was cool, but nothing was evolving that would use vision. Vision would make these creatures exhibit the kind of action at a distance that vision permits. The kind of behaviours in which the creature examines its environment and acts accordingly.
I am now experimenting with a new LOOK instruction. LOOK takes an (x, y) vector. Currently the these look vectors are actually terminated at the endpoint of the vector. Now I am testing a new approach where the vector projects to infinity (to the end of the bounds of the simulation universe). Preliminary results are good! Within only about an hour of simulation there are creatures using the LOOK-SPORE instruction to alter its movement. I am very encouraged by this new tweak.

}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Evolve 4.8 released }
Date{ 2007-1-8 }
P{
One of the best and most polished releases yet! Evolve 4.8 is out, get it now! It's free damn it! It has a much improved vision system (that evolution actually finds useful enough to select for)
I went back to the old absolute code block adressing scheme (in contrast to the relative addressing).

Improved the documentation a lot.

Created some fun sample simulations to watch (especially 'intestines.evolve')

One year of alife restarted! Wooohooo.

NOTE: White balance on those coffee drip photos sucks :-(


}
}

//{ ====================================================================== }

Blog{
Title{ Alife box rebooted: power outage }
Date{ 2007-1-15 }
P{
Austin had a power outage for a couple of hours yesterday. My battery backup worked but ran out of juice a few minutes before the power was restored. I had expected it to last longer. It's a huge battery and it was only powering the box (no monitors etc...). I expected it to last 4 hours, but I guess I calculated the watt hours wrong.
The job of the battery back up was to survive those breif power drop outs (of which it has survived many). So I am not totally bummed by this event.

It's back up and running. I am sorry to lose the awsome 'uptime' of 100+ days. Alife simulator is also running where it left off.

On a related note everytime I reboot one of my suse linux boxes, i need to play around with routing to make is "see" the internet. I finally figured out what settings to play with, but why? Once I configure using YaST why does it keep forgetting my network settings on reboot?

Very annoying.


}
}

//{ ====================================================================== }

Blog{
Title{ In Real or Artificial Life, Is Evolutionary Progress in a Closed system possible? }
Date{ 2007-1-15 }
P{
Answer: YES. It can be trivially shown to be true using the following proof:
[b]STEP 1:[/b] Define what constitutes Evolutionary progress.

[b]STEP 2:[/b] Create a closed system with agents that can posses only one of two possible genes. The first gene is the [b]"DO NOTHING gene"[/b]. The other gene is the, "Perform the thing that satisfies the definition of evolutionary progress" gene (as specified in STEP 1). Called the [B]"X gene"[/B] for short. 

[b]STEP 3:[/b] Create agents with the [b]"DO NOTHING gene"[/b] .

[b]STEP 4:[/b] Eventually, one of the agents will produce offspring where the [b]"DO NOTHING gene"[/b] has been mutated into the [b]"X gene"[/b]. And thus the closed system will have demonstrated evolutionary progress.

Ergo, you have demonstrated that yes, in real or artificial life, evolutionary progress in a closed system possible.

End proof.

[i]NOTE: This proof works for [b]any[/b] definition "X" that one cares to use as demonstrating evolutionary progress (and can be expressed as computer code).[/i]

[b]Example:[/b]
Lets say you want a closed system to start out doing nothing, but then evolve to play chess. Then define the X-gene as "play chess". Now create an artificial life simulator that has a chess program built into it, and this chess program is activated when an agent aquires the "X-gene". Then start out your simulation with agents that only posses the "DO NOTHING gene". In a short time, you will have agents that can play chess. Wow, how very impressive! (sarcasm)

This is why the alife-x-prize is a prize for an inherently trivial question. I win!!!! Pay me fuckors!!!

See the prize website at: 
[url=http://www.panspermia.org/eprize.htm#whatsnew]http://www.panspermia.org/eprize.htm#whatsnew[/url] 



}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: 1 Year of Alife Status }
Date{ 2007-1-18 }
P{
The new 1 year of alife looks good, the new vision system is being used, and the amount of variation I am seeing is good. 
I am working on a 3D version, which uses the IRRLICHT 3d engine. The 3d version will allow you to explore a simulation in a first-person perspective (rather than looking down). It will have "spectate mode" in which you just look around at a running simulation. And player mode. In player mode you are an actual organism, and you are part of the simulation. You use Quake navigation keys. When you encounter a creature, you can "EAT" using the mouse button. If you are killed, you're energy is deposited at that spot as organic material.

Hopefully, as you play evolution will take place and adapt to your EATING of them. You goal is to eradicate all creatures. But each each time you're killed you start over in a random spot (and all your hard earned energy is consumed by those organisms that most likely killed you).

If all goes well, you can download various simulations (from 1 year of alife for example) and be able to experience the strength or weakness of the evolving creatures first hand.

In theory these creatures should get harder to kill just by competing against themselves. So you as a player, are not needed to breed more difficult opponents.

Anyway, the possibilities for gameplay modes are huge, and it should make this a fun game as a well as an alife sim.

Here's some evolve KFORTH that uses vision:

Code<<_EOF_
{ -3 5 2dup NEAREST2 EAT pop OMOVE ?loop 1 EAT NEAREST -2 AGE 2* OMOVE ?loop 1 EAT 2 call 1 }
_EOF_


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: 1 Year of Alife Status }
Date{ 2007-1-18 }
P{
The new 1 year of alife looks good, the new vision system is being used, and the amount of variation I am seeing is good. 
I am working on a 3D version, which uses the IRRLICHT 3d engine. The 3d version will allow you to explore a simulation in a first-person perspective (rather than looking down). It will have "spectate mode" in which you just look around at a running simulation. And player mode. In player mode you are an actual organism, and you are part of the simulation. You use Quake navigation keys. When you encounter a creature, you can "EAT" using the mouse button. If you are killed, you're energy is deposited at that spot as organic material.

Hopefully, as you play evolution will take place and adapt to your EATING of them. You goal is to eradicate all creatures. But each each time you're killed you start over in a random spot (and all your hard earned energy is consumed by those organisms that most likely killed you).

If all goes well, you can download various simulations (from 1 year of alife for example) and be able to experience the strength or weakness of the evolving creatures first hand.

In theory these creatures should get harder to kill just by competing against themselves. So you as a player, are not needed to breed more difficult opponents.

Anyway, the possibilities for gameplay modes are huge, and it should make this a fun game as a well as an alife sim.

Here's some evolve KFORTH that uses vision:

Code<<_EOF_
{ -3 5 2dup NEAREST2 EAT pop OMOVE ?loop 1 EAT NEAREST -2 AGE 2* OMOVE ?loop 1 EAT 2 call 1 }
_EOF_


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE:  writing code }
Date{ 2007-2-2 }
P{
[blockquote]I'd rather write code that writes code than write code.
[/blockquote]

}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: OpenGL 3d explorer for evolve }
Date{ 2007-2-7 }
P{
Go to the [url=http://evolve4.invisionzone.com]Evolve 4.0 Forum[/url] and you can download a program to explore the evolve world in 3D (and with the simulation running).
I used OpenGL to implement this, but before that I used a game engine called IRRLITCH.

[img=http://evolve4.invisionzone.com/index.php?act=attach&amp;type=post&amp;id=41]

My advice to those wanting to do some 3D programming is to bypass game engines. What I learned was that for just modeling my universe in 3D I didn't need all the power of the game engine. All I needed was a mechanism for creating 3d elements (defined using (x, y, z) vertices). And online there are lots of  openGL tutorials and sample code.

The OpenGL API is simple to use, and the Glut utility library is also simple to use. And lots of documentation is available. A game engine gives you lots optimization algorithms (culling) and lighting and particle physics. Nothing wrong with having all these elements in a single package.

Using pure OpenGL allows you to customize your program to the needs of your simulation. I found using a game engine was not the right choice for Evolve 4.0 (too many things being animated and visible at the same time).

And OpenGL is not changing. 100% of game engines out there are in a state of constant flux. Also, you're tieing yourself to a 3rd party with a small niche of users. OpenGL is everywhere (Direct3D is too).

My advice applies to those with projects that are not the standard FPS shooter environment. If you are building a game that has maps, with all kinds of rooms, levels, and baddies, then the game engine approach makes a lot of sense.

}
}

//{ ====================================================================== }

Blog{
Title{ Evolve 4.0 Videos }
Date{ 2007-4-12 }
P{
I used some screen recording software and uploaded 3 clips to google video. They really suck. I need to tweak the process so I can capture video that looks better. Any ideas? Here's the videos:

[url=http://video.google.com/videoplay?docid=-8665058997517349526&amp;hl=en]Clip 1[/url] 

[url=http://video.google.com/videoplay?docid=1463438869567612638&amp;hl=en]clip 2[/url] 

[url=http://video.google.com/videoplay?docid=-7914999116766872549&amp;hl=en]clip 3[/url] 


}
}

//{ ====================================================================== }

Blog{
Title{ Evolve 4.8c released }
Date{ 2007-4-22 }
P{
A much improved version of Evolve is now available. It includes "game mode" which lets you control a creature in the simulation and eat other organisms. Ideally while you are doing this, the population of creatures are evolving to get better at avoiding you. Your interaction with the simulator becomes a selective pressure and evolution should select creatures that are better and better at avoiding/killing you.
Also new is a Radioactive Tracer feature. This feature lets you mark creatures and observe their offspring through time.

I fixed a nasty bug that has been around since the first version. It involved not releasing a GDI device context handle. After a while the GUI would get wierd and eventually crash. This no longer happens.


}
}

//{ ====================================================================== }

Blog{
Title{ Artificial Life: Introduction }
Date{ 2006-5-6 }
P{
ALife or Artificial Life mostly refers to software that simulates life. It creates software entities that (1) Can Replicate, (2) Can Evolve.
I have been writting my own application for ALife since 1996. It is called 'Evolve' and the current version run using Eiffel.

In a couple days I will be releasing Evolve 4.0 which is much better. Also I will be launching my project "One Year of ALife".

This project will employ a spare computer (running Linux) to continiously simulate a universe of evolving creatures. Every day I will upload the latest simulation results.

This blog (under the category ALife) will be used to keep a commentary on the results.

Here is the project website:
[url=http://www.stauffercom.com/alife]One Year of ALife[/url] 

It includes the current simulation file(s).

}
}

//{ ====================================================================== }

Blog{
Title{ Announcing Evolve 4.0 my new ALife software }
Date{ 2006-5-6 }
P{
I will be running an ALife simulation for one year. The software is available here:

[url=http://www.stauffercom.com/evolve4]Evolve 4.0[/url] 

Both source and executable are available. The website includes lots of pretty screen dumps and so on.


}
}

//{ ====================================================================== }

Blog{
Title{ Alife day four }
Date{ 2006-5-7 }
P{
This is my first [b]real[/b] entry to my ALife blog. These will be quick entries to summarize the simulation so far.
So, the universe has simulated about 50 million steps. And there have been about 1 billion creature born.

The current snapshot contains about 1,500 organisms.'

Here is the genetic program from one of the creatures:

Code<<_EOF_
main:
{
	6 call 9 if 3 call 87 ?loop 
}

row1:
{
	AGE 46 -80 LOOK 
}

row2:
{
	&lt;= GROW 
}

row3:
{
	R0 -31 OMOVE EAT ?exit ?loop 
}

row4:
{
	
}

row5:
{
	&gt;= 
}

row6:
{
	-210 59 OMOVE EAT ?loop LOOK2 ?loop 
}

row7:
{
	
}

row8:
{
	
}

row9:
{
	R5 ENERGY 4 / R0! -65 R1 R0 MAKE-SPORE 2- 
	R7 2 MAKE-SPORE GROW OMOVE 
}

row10:
{
	AGE 
}

row11:
{
	-76 
}

row12:
{
	
}
_EOF_

This creature was generation [b]254,987[/b] meaning you must go back one quarter million generations to get to the first organism in this simulation. It also means that the mutation algorithm has been applied to the initial program about 250,000 times.

Oh, by the way... Here is the intial genetic program:

Code<<_EOF_
;
; a good seed organism
;
; BEHAVIOR:
; This creature forever moves in various directions until
; its forward movement is blocked. As it moves it eats.
; Before moving in a new direction it will try to reproduce.
;

main:
{
	reproduce call
	reproduce call

	;
	; go SOUTH-EAST until blocked (eat along the way)
	;
	{ 1 1 omove eat pop ?loop } call

	reproduce call

	;
	; go WEST until blocked (eat along the way)
	;
	{ -1 0 omove eat pop ?loop } call

	reproduce call

	;
	; go SOUTH-WEST until blocked (eat along the way)
	;
	{ -1 1 omove eat pop ?loop } call

	reproduce call

	;
	; go EAST until blocked (eat along the way)
	;
	{ 1 0 omove eat pop ?loop } call

	reproduce call

	;
	; go NORTH-EAST until blocked (eat along the way)
	;
	{ 1 -1 omove eat pop ?loop } call

	reproduce call

	;
	; go SOUTH until blocked (eat along the way)
	;
	{ 0 1 omove eat pop ?loop } call

	reproduce call

	;
	; go NORTH until blocked (eat along the way)
	;
	{ 0 -1 omove eat pop ?loop } call

	reproduce call

	;
	; go NORTH-WEST until blocked (eat along the way)
	;
	{ -1 -1 omove eat pop ?loop } call

	reproduce call

	;
	; do it all over again
	;
	1 ?loop
}

reproduce:
{
	;
	; compute 1/4 of our energy, and store in R0
	;
	energy 4 / R0!

	;
	; Make 1st spore to the square on our left.
	;
	-1 0 R0 make-spore pop

	;
	; Put 2nd spore at the same spot (fertilizing it)
	;
	-1 0 R0 make-spore pop

	;
	; get the hell out of the way so we don't eat our own
	; babies, or they don't eat us.
	;
	1 1 omove pop
	0 -1 omove pop
	0 -1 omove pop
	0 -1 omove pop
	0 -1 omove pop
	0 -1 omove pop
}
_EOF_

One thing I am most happy about in the evolved genetic program is the usage of [b]LOOK[/b] and [b]LOOK2[/b]. I haven't fully analysed the code yet, but it appears this instruction is being called and affects the behavior of the creature. This is something I have been hoping for. If all goes well this kind of awareness will continue as "smarter" creatures evolve.


}
}

//{ ====================================================================== }

Blog{
Title{ ALife progress: day 6 }
Date{ 2006-5-9 }
P{
The population has crashed to around 500 - 600. This usually means the simulation is about to "die out". This condition happens on many simulations I have performed. Right now it looks good. Ideally I want the population to be around 1,000 - 2,000.
Right now creatures are moving around and reproducing, so its not the end yet. If it "dies out", I will start over with a new simulation.

}
}

//{ ====================================================================== }

Blog{
Title{ ALife update: first sim dies out }
Date{ 2006-5-10 }
P{
Well the simulation "died out". I launched a contingency simulaton. This one is (1) 700 x 600 and (2) 200,000 units of energy and (3) Simple enclosure.
The previous simulation was 400x500 had 150,000 units of energy in the system and (4) had a bunch of ugly barriers.

Hopefully this one will be last longer (1 year!!!!)

}
}

//{ ====================================================================== }

Blog{
Title{ Alife: New sim looks good }
Date{ 2006-5-11 }
P{
Its only been one day, but the new sim looks better. I think I will be able to run this for a year. I made the universe bigger(700 x 600 units). I also didn't shove in any barriers. The universe is just one big open area. (the entire grid is surrounded by an oval shape). The amount of energy was also increased to 200,000 units. So far the number of organisms is about 1,000 - 2,000. Right where I like to see it.


}
}

//{ ====================================================================== }

Blog{
Title{ 'If you build it, they will come' is NOT an ALIFE motto }
Date{ 2006-5-11 }
P{
In Artificial Life programming, one first creates an Artificial Universe. This is a virtual place in which replicating entities will live and replicate. But one thing I have learned is that it is hard to predict how these replicators will use the universe you created for them.
The phrase, "If you build it, they will come." was used in Field of Dreams to describe some dude building a ball park. And dead baseball players would come to play.

This motto most definately [b]does not[/b] apply to ALife, because, my Evolve 4.0 software includes things [b]I hope[/b] will be exploited by the evolving creatures, but I am not seeing them flock to these features. One feature is sexual reproduction. Who wouldn't flock at the chance to have sex? But my creatures seem happy with asexual reproduction. The problem I see is that what seems like a good idea to me, could be totally off base. My mechanism for sexual reproduction has to have a survival advantage.

The other thing I built into Evolve was a variety of LOOK instructions. This allows a creature to look at its environment. Hopefully this will enable it to find food better, or avoid being eaten. So far these instructions have not been used. I built these things, but ALife didn't come. 

I think a good motto for ALife is: [i]"If you build it, they [b]may[/b] come. Or they [b]may not[/b] come. If they do come it will be for totally weird and bizarre reasons that you never anticipated."[/i]


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: The sweet spot is to be on  the edge of chaos }
Date{ 2006-5-13 }
P{
My simulations, the ones I keep running "for one whole year" keep dying out after a couple of days!!! Hee heee hee. Oh well, gotta give earth credit. Life is a bitch! 
Anyway, I did see some cool creatures during this process. Creatures that swarmed and used LOOK instructions to determine where to go. I am very optimistic about this. Anyway, I am going to keep testing out new sims until I get one that lasts.

On a very relevant note: Christopher Langton (founder of ALife), describes a "Lambda" value which is a measure of a Cellular automata's complexity. There's a sweet spot in his classification scheme. It is called being on the "edge of chaos". I think my simulations keep dying out because they are either too chaotic or too wimpy and die out. Whatever...

I will attempt more research on this idea. Maybe I'll find a way to tweak my simulator to enter (and stay in) the sweet spot.

However, I did learn that a lot of other ALIFE programs suffer from similar issues. I'll just have to deal with it. Please be patient. I am confident that a year long simulatio is possible.


See:
[url=http://math.hws.edu/xJava/CA/EdgeOfChaos.html]EdgeOfChaos.html[/url] 


}
}

//{ ====================================================================== }

Blog{
Title{ If we were in The Matrix, could we ever know? }
Date{ 2006-5-14 }
P{
I wonder if we are inside of a simulation. This isn't a new idea, of course. It was the premise of "The Matrix" and is also known as the "The Brain in the vat" problem.
Anyway, what I wish to ask is not if we are in a vat, or part of an elaborate virtual reality simulation. No. For now, let's just assume that we are. My question is this: Can we ever know? [b]Can we, in principle, come discover the fact that we are ALife creatures in a simulation?[/b]

The movie "The Matrix" hinted that imprefections in the matrix (bugs in the simulation program let's say), and especially smart individuals could 'get outside' of the simulation and come to learn the truth.

I can't see how this could ever happen. Even with imperfections in the simulation you wouldn't see them  as imperfections. To you, inside of the simulation these bugs would seem perfectly natural to you. It certainly wouldn't point to the fact that you are inside of a simulation. And most definately wouldn't give you any clue to the bigger context of your existence.

The simpsons had a halloween special where Lisa created life out of a decaying tooth. The difference between that scenario and "The Matrix" is Lisa's creatures (although tiny) were still made of the same "stuff" as lisa. They could observe the same atoms. Lisa's creatures could in principle discover that they are in a dish, and that dish is in a home, and that home is on a giant ball called a planet. And so on...

But creatures in a simulation don't observe the same "stuff" as that which the simulation is running on.

The lisa-style emergence of life doesn't at all conflict with my metaphysics. But the other kind. The Matrix kind, is more puzzling to me.


Maybe quantum weirdness (like the double slit experiment) is just us glimpsing the floating point rounding errors that make up the simulator we inhabit.


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Are 64-bit numbers enough? }
Date{ 2006-5-14 }
P{
[url=http://www.stauffercom.com/evolve4]Evolve 4.0[/url] uses 64-bit integers for most of the counters and stuff that will grow quite large during a long simulation run. The counters that increase at the highest rate are the ones that count the number of organisms born.
My simulations are running at a rate of about 1 billion creatures born every 4 days. This means that if Evolve was using a 32-bit counter, it would overflow in about 16 days.

How long can I run my simulation with 64-bit integers before
an overflow will occur?

Answer: [b]202,156,099[/b] years


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Good sim, finally! }
Date{ 2006-5-16 }
P{
The sim i am running right now has not died off! It has been 2 days (and 1/2 billion creatures born) and it seems pretty robust. THere seem to be two types of creatures. A "fungus" or toxic mold colony that just sticks to the barriers and doesn't move. This stuff seems to get stronger and stronger because it is sharing energy and food with all of its neighbors. So a stray organism that gets sucked into this colony has no chance. The creature at the bottom (farthest away from any other moving creatures) lives a long time and has a huge amount of energy.
The other creature that lives here are small moving ones that moves around. They have some wacky motion, and seem at least be sustaining themselves against this fungus creature.


Just for kicks here is really cool sim that I am also running on a machine. In theory if you enter these values, you'll see the same thing. I like it because it doesn't grow to big:

  [b]seed:[/b] 1229
  [b]width:[/b] 300
  [b]height:[/b] 300
  [b]energy:[/b] 100,000
  [b]program:[/b] seed.kf
  [b]oval barrier:[/b] enabled


}
}

//{ ====================================================================== }

Blog{
Title{ The gene that wouldn't go away }
Date{ 2006-5-17 }
P{
After 700 million births the genetic program that started this simualtion is all but gone. But, not suprisingly the one tidbit of genetic code that is still recognizable is the section that controls how reproduction happens. Here is the original code:
[b]
  energy 4 / R0!
  -1 0 R0 make-spore pop
  -1 0 R0 make-spore pop
[/b]

This computes 1/4 of our energy and makes 2 spores at offset: (-1, 0). I randomly viewed this from one of the creatures in todays sim:

[b]
    energy 5 / R0!
    -74 -3 R0 make-spore
    2- -2 R0 make-spore
[/b]

It is not suprising that this code has remained intact (at least intact enough for me to recoginize it as part of the original). Any bogus change to this code would make the creature sterile. What has changed is the amount of energy given to offpsring (2/5 instead of 1/2). Also the offset has changed from (-1, 0) to (-1, -1). This isn't a trivial change. Both places where this coordinate is used would have to have changed at the same time.

The universe still consists of the fungi crap, and the little moving creatures. The fungi looks much reduced from yesterday. And the sim look healthy for now, and I don't think it will "die out" any time soon.

Tommorow should see the first billion creatures born. It takes about 4 days for that to happen. Over the year there should be 91 such occurances (and about 2.4 billion simulation steps).


}
}

//{ ====================================================================== }

Blog{
Title{ How does the sim get uploaded? }
Date{ 2006-5-17 }
P{
On my linux box, I am running a perl script, which runs 'evolve_batch' for 24 hours. When that completes, my perl script compresses the output and FTP's it to my website. It also rebuilds the file "progress.html" (which lists all the simulation snapshots). So I don't have to do anything, except pay my electric bill on time.

}
}

//{ ====================================================================== }

Blog{
Title{ Two fun and cool Evolve projects to try out }
Date{ 2006-5-17 }
P{
Two things come to mind that I would like to see happen. I don't have the time/skill to write good KFORTH programs, so all my simulations begin with 'seed.kf' which is a really dumb program. But I am fine with this because it is my intention to see darwinian selection evolve a really smart creature, well beyond my humble 'seed.kf' program.
But two things would be cool to see. (1) Create a new seed program that has some good LOOK instructions that make the creature a little smarter than what I use. Then run the sim from that point and see what happens.

(2) My sim uses asexual reproduction. But in theory creatures could evolve to use sexual replication. So another cool idea is to write a good "seed_sexual.kf" program which starts out with sexual reproduction as the starting point, and see how evolution proceeds from that point.


}
}

//{ ====================================================================== }

Blog{
Title{ Furture work for Evolve }
Date{ 2006-5-17 }
P{
I have a list of little GUI items to change. At least for the forseeable future the core simulator won't change so that the "one year of alife" will be compatible. But one feature that is taking up all my thinking is [b]"competition mode"[/b].
Up to eight strains of creatures can be placed on a blank simulation, and then you watch them evolve. Strains cannot interbreed. You can then see which strain (or strains) become successful and which ones die out.

This feature will allow competition mode for people who like core wars. You can write a KFORTH genetic program and compete against other programs. Several variants are possible:

By disabling reproduction (preventing KFORTH programs from using the make-spore instruction) you have your basic arena style robot war game.

By keeping reproduction but disabling mutations (setting the mutation rate to 0%) you have an interesting variant in which you can clone your robots and breed an army hoard, but they won't mutate (and thus won't evolve).

Anyway, I think I can introduce this feature (plus lots of related features) without altering the core application much.

You can already kind of play these kind of games, but it is clumsy and difficult to setup. Mostly I need the ability to drag/drop organisms around etc.., and introduce the concept of "strain". Strain will use the upper 3 bits of the organism-ID (a 64-bit integer). This gives eight total strains in any simulation. The only change to the simulator is that organisms from different strains cannot reproduce together. This means the starting "strain" of a creature is retained throughout the simulation. At any time we can count up all the creatures for each strain (this would constitute the "score" of the game).


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: 1.6 billion served }
Date{ 2006-5-19 }
P{
"served" isn't the right word. 1.6 billion creatures born. The simulation is at about 30 million simulation steps.
I don't have way to fetch this statistics yet, but an important number in such a simulation is the generation of an organism. The max generation would be the creature with the biggest generation number. This number is how many parents/grand parents etc... this creature has all the way back to the first organism in the sim.

From sampling the population here are some numbers:

A fungi creature: 202,954 th generation

A roamer creature: 142,975 th generation

These numbers make sense as the toxic fungi creatures reproduce faster and in groups. That's kind of their survival strateg. They spew spores and others eat them, so fungi is kind of super organism that is hard to eradicate because they are all sharing energy, and of course reproducing more frequently than the roamers.

Roamers move in this pattern: They head in the North-East direction (eating and reproducing) then swing down and head back in the opposite direction (south west).

roamers are very cautious. The nibble at the fungi very tentatively. Their shape is that of a vertical bar. They range in size from about 2 squares to about 8 squares.

But the 'generation' number also reveals how much evolution has taken place. For example, the average human to human reproduction is about 20 years. But this is exceptionally large for a mammal. Lets pick 5 years. How many generations till we get to the death of the dinosaurs? Well that was 65 million years ago. So there are about 13 million generation between any of us and some kind of creature that lived during the last days of the dinosaurs.

This project should achive about 9 million generations over a 1 year period. That is pretty signifigant. Many things could alter this. If later in the sim the life cycles changes so that creatures don't reproduce as rapidly, then this estimate could change a lot.

I harp about how many creatures have been born (1.6 billion) or the number of steps (30 million), but really 'max generation' is a better indicator of the amount of evolution that has had a chance to take place. I will make a big deal of the "1 million-th generation". This should happen a month from now.

Oh I added a forum for discussing Evolve and other related topics: 

[url=http://evolve4.invisionzone.com]Evolve 4.0 Forum[/url] 



}
}

//{ ====================================================================== }

Blog{
Title{ Self Copying }
Date{ 2007-5-1 }
P{
Alan Turing spent a lot of effort thinking about the logic for self copying machines.
All ALIFE simulators need to have a mechanism by which the evolving entity gets replicated. Avida, Tierra and Nanopond have the most "low level" copy mechanism. My simulator and others like it offer only a very high level operator like "MAKE-SPORE". These high level operators copy everything and insert pre-designed mutations.

The low level self-copiers on the other hand must manually read each "byte" or instruction from their DNA code and then manually write each instruction to the output. Their minimum (non-parasitical) copy routine is equally as compact as what is done in  Evolve. The difference is the low-level copiers offer a multitude of copy variants.

The low-level self copiers are great at spawning parasites, viruses, and all kinds of bizzare agents that discover tricks to get their DNA spread around. (Evolve and the other high level copiers don't easily do this)

I regret Evolve 4.0 doesn't take this approach. I wasn't well versed in all the alife programs out there when I began Evolve. If I were building Evolve today I would have implemented low-level operators for inspecting the organisms KFORTH and copying small bits to the output.

Then I wouldn't have needed a special concept of "sexual" or "asexual" reproduction. If sexual reproduction ever did emerge, it would be an amazing thing, as it might reveal the steps that sex evolved on this planet.

It would be a worthy goal of the Avida, Tierra and Nanopond style simulators to run long term sims with the goal of seeing a real honest to goodness sexual population emerge.

(Evolution of sex is a major puzzle:
[url=http://en.wikipedia.org/wiki/Evolution_of_sex]http://en.wikipedia.org/wiki/Evolution_of_sex[/url] 

}
}

//{ ====================================================================== }

Blog{
Title{ High-level Copy versus Low-level Copy }
Date{ 2007-5-1 }
P{
To elaborate on the previous discussion on self-copying. Here are two [b]real-world[/b] coding examples that can be used on windows to copy files:
Low level copy:
Code<<_EOF_
   f1 = fopen("source", "r");
   f2 = fopen("destination", "w");
   while( (c = fgetchar(f1)) != EOF ) {
       fputchar(f2, c);
   }

   fclose(f1);
   fclose(f2);
_EOF_


High level copy:
[pre]
   CopyFile("source", "destination");
[/pre]

Both do the same thing, both are fairly compact algorithms. But the low-level copy can be hacked and modified more by evolution. The other one, the high level copy is just an atomic operation. Evolution doesn't have much to work with in this case. But the low level mechanism offers all kinds of ways in which a parasite can get started, and perpetuated.

(Even the "low-level" example could have been expressed at even lower levels: For example machine code could have been used and BIOS interrupts)

}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Boring update }
Date{ 2006-6-1 }
P{
Boring update. I have 8 days worth of simulation going. I released a much improved version 4.5 of Evolve. I like the current simulation because it has lots of barriers. The creatures are not all uniform like the last attempt. Some creatures are even dabbling with multi-cellularism. The genetic programs vary a lot and they use lots of rich calls to subroutines and etc...
Steps: 141 million. Births: 2.6 billion. Avg. Generation: 550,000

B{
Code<<_EOF_
main:
{
      11  call  call 
}

row1:
{
      EAT  EAT  2  OMOVE  OMOVE  EAT  OMOVE  OMOVE  EAT  not
      dup 
}

row2:
{
     
}

row3:
{
     
}

row4:
{
      -79 
}

row5:
{
      =  SEND  pop 
}

row6:
{
     
}

row7:
{
     
}

row8:
{
     
}

row9:
{
      ENERGY  5  /  R0!  -49  EAT  R0  MAKE-SPORE  -57  R1  R0
      MAKE-SPORE  sqrt  if  pop  1  call  -58  OMOVE  CMOVE  CMOVE
      EAT  invert  ?loop 
}

row10:
{
     
}

row11:
{
      -71  -78  CMOVE  EAT  &gt;  ?loop  pop  9 
}

row12:
{
     
}

row13:
{
      &gt;=  swap  -3  -9  /mod 
}

row14:
{
      -22 
}

row15:
{
      R6  abs  LOOK-CELL  -28  2pop  49  -32 
}

row16:
{
     
}

row17:
{
      R8  call 
}

row18:
{
      =  SEND 
}

row19:
{
      -79 
}

row20:
{
      =  SEND  pop 
}
_EOF_
}

I think once a set of genes evolve for supporting multi-cellular creatures, then evolution in this type of world really take off. Perhaps this is the precambrian phase .

I just noticed that row9 (which was the reproduction code I wrote for the first organism) has mutated so that each spore gets 1/5 th the total energy of the organism. This differs from my original code in which each spore got 1/4 units of energy. What is very interesting to me is that this is the exact same mutation that occured in a previous simulation (see [url=http://www.stauffercom.com/kjsblog/index.php?entry=entry060517-100401]the gene that wouldn't go away[/url] )

This change evolved in two totally different simulations.


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: my KFORTH genome }
Date{ 2006-6-5 }
P{
I had my DNA tested and here is what my genome looks like:
B{
Code<<_EOF_
main:
{
    EAT poop pick nose MAKE-SPORE WATCH-TV 1 ?loop
}
_EOF_
}


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: UPS }
Date{ 2006-6-10 }
P{
This is just an update on the "One Year of Alife" thingy. It continues to run. A very boring creature has persisted for many days. It is single celled. It moves diagonally between the top-left and the lower-right. It creates a spore/organism which is quickly eats. But when it hits something, or eats something it will make a proper offspring.
There is a 2nd group of organisms that are multi-celled. These creature are like the single-celled ones. They are verical bars, sometimes double width.

I am running another sim, called "default.evolve" which is looking quite exciting. It is bundled with the evolve executable. I also posted an early version of it on the evolve 4.0 forum.

I bought an Uninterruptable power supply for the linux box. This provides 30 minutes of reserve power in the event of a power outage. This is needed as I am going away on business for a couple weeks and if power trips, there is no restoring the machine until I get back.


Setting up the website, finishing the documentation, and releasing the software has been difficult. I am now able to move on to other fun stuff in my life. This means I can let the linux box/simulation just run with little input from me. This is a good thing, as this project will run for a whole year. What I like about the current sim is it doesn't threaten to "die out".

5.6 billion births. 180 million steps. 722,000 generations



}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Simulator Flaws }
Date{ 2006-7-1 }
P{
The sim continues... For the last 2 weeks I was in St. Petersburg, Russia. I left the simulator running all that time and when I got back it was still running. The power even went out (all my clocks were blinking "12:00"). This means my UPS worked. Yee haw, whoo hooo!
I have identified two signifigant flaws with the current version of the Evolve simulator (ver 4.5). First, instruction-level mutations only add/remove a single instruction. This seems like a good idea. This seems to reflect the gradualism of Darwinism. However, if you examine the KFORTH language you'll notice that inserting or removing just a single instruction is rarely a useful thing.

In a universe in which stack space cost energy, and lack of energy equals death. No creature can afford to be wasteful with stack space, and therefore cannot tolerate stack unfriendly instructions. But adding a single instruction is almost always stack unfriendly in KFORTH....

I have observed the following trends in many long-term sim. Early on a certain behavior evolves in creatures. It becomes a widespread/universal behavior. And the for many days this behavior remains. It's not a bad behavior, but it just cannot be pushed out of this local optima. Why? Because any distruption to these "tight looped" algorithmic behaviors, spells certain death to the organism. There is simply no single instruction mutation that CAN EVER change this status quo.

I am reminded of Richard Dawkins' description of biomorph space (in "Climbing Mount Improbable"). He compares this space as a 2-D surface. With bumps, hills, even mountains. Most evolution occurs along the gradual smooth surfaces and rarely jump ups cliffs.

My "yellow-square-morph-space" had a very big plane with lots of awsome innovative hills and mountains all over the place. However, to begin climbing any of these cool mountains requires a 2, 3, or 4 instruction mutation -- all at once. A macro-mutation if you will.

Maybe an example will clarify my point. For example, this could very well be a cool sequence of instructions for a creature to have:

Code<<_EOF_
 1 1 LOOK ?exit

_EOF_

But in the current version, this would have had to accumulate one instruction at a time:

[pre]
   1                ; death
   1 1              ; super fast death
   1 1 LOOK         ; hmmm, maybe something good
   1 1 LOOK ?exit   ; again, maybe something good
[/pre]

In KFORTH a single inserted instruction usually means run away stack growth and death. But if you allow 2 for mutations of 2, 3 or 4 instructions long, then there are lot of possibilities that won't mean death, and could be improvements.

[pre]
	1 pop
	pop 1
	0 SEND
        EAT pop
	..
[/pre]

Many 2 instruction combinations are possible, which can be inserted into a code block and will not screw up the stack.

Gradulism is still part of Evolve's mutation mechanism, this is why my mutation strand length will be kept low (1 to 4).

If I had chosen a strand length of (1 to 100), then most mutations would be on average 50 instructions long, and that would harldy result in improvements in survival.

So my new mutation mechanism has been modified to reflect the realities of the KFORTH laguage, and its stack based properties. A mutation length of 4 seems like a nice balance between being too drastic, and being too miniscule.

So fatal flaw #1 was, "1 instruction mutations are too small". Solution: increase mutations to use instruction stands of length 1 to 4.

The second fatal flaw involved something I was quite proud of in KFORTH. I thought the design of KFORTH was such that instructions could be added and removed without being overly destructive. For example,

Code<<_EOF_
	X Y Z ?loop A B C D ?loop E F G H ?exit M N O ?loop
_EOF_

I have used X, Y, Z, ... for regular instructions. But the flow control ones are shown. Notice that even if instruction are added or removed, the ?loop and ?exit instructions continue to refer to the same places they always did before (the beginning and end of the code block).

This is similar to "position independent code". Position independence means the physical bytes of the machine code can occupy any physical address in memory and work correctly unchanged.

KFORTH, at least for the instructions inside of a code block enjoyed a form of "mutation independent code". Meaning instructions could be added and removed and the flow control stuff would still kind of work.

So where's the fatal flaw? It has to do with calling other code blocks. I used absolute code block numbers, when I should have used relative code blocks. I see that now! Here's a recursive code block:

Code<<_EOF_
	{ X Y Z ?exit 49 call }    ; &lt;-- code block 49
_EOF_

'49' is the absolute code block number of this code block. This isn't a problem when humans write KFORTH. As the compiler handles the label. But when code is re-arranged due to mutations, then this code block will not always live at code block address '49'.

With relative code block addressing, the above would look like this:

Code<<_EOF_
	{ X Y Z ?exit 0 call }    ; &lt;-- code block 49
_EOF_

Ahh. The beauty! "0 call" means call oneself! I love it!!!! It will alway mean "call myself" no matter where this code is moved. This also means one or more related code blocks will continue to work, even if a code block was inserted above them.

Consider this,

Code<<_EOF_
	{ .... }
	{ .... }
	{ X Y Z 2 3 ifelse }
	{ .... }
	{ true-block }
	{ false-block }
_EOF_

If a mutation occured that shoved in a new code block above these,

Code<<_EOF_
	{ .... }
	{ .... }   ; &lt;-- added
	{ .... }
	{ X Y Z 2 3 ifelse }
	{ .... }
	{ true-block }
	{ false-block }
_EOF_

Then this code will continue to work.

So there you have it. Fatal flaw #2 was absolute code block addressing. SOLUTION: Switch to relative addressing.

This change does not change anything about writting KFORTH using labels. As the compiler automatically generates the proper relative address from the label. For example,

Code<<_EOF_
	factorial: { .....   factorial call }
_EOF_

Therefore to call the code block before you:
Code<<_EOF_
{ -1 call }
_EOF_

To call yourself:
Code<<_EOF_
{ 0 call }
_EOF_

To call the code block after you:
Code<<_EOF_
{ 1 call }
_EOF_

Wow! Awsome. Now groups of code blocks can evolve and enjoy a little bit of independence from mutations happening around them.

So given all these discoveries...
   (1) Evolve version 4.6 will be much different, and much, much better. And,

   (2) One Year of ALife will have to be restarted using this version :-(

It saddens me to lose 30+ days of simulation effort. But the changes made are so much in the best interests of this project that I have to do it.

This may happen in a couple days from now.

}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Evolve 4.6 released }
Date{ 2006-7-8 }
P{
I released version 4.6 of Evolve. This version is different enough from previous versions that (1) Upgrade of old sim files is not feasable. (2) One Year of ALife was restarted using this new version.
The changes mentioned in the last blog entry were made. One thing that I changed (which was not mentioned) is adding a "no cost stack" feature. Every cell gets 10 free stack elements to play around with, which do no cost energy. After the 10th element each stack entry costs 1 unit of energy.

This change has really made my sim behave the way I always envisioned it to work. What this does is put all algorithms on an even footing with each other (atleast for all algorithms that use only 10 stack elements or less).

Before, a program that used only 3 stack elements was better than a program that used 4 stack elements. 'better' meaning used less energy. Which translated into a large survival advantage. Anyway, the new approach still has limits on stack growth, but these limits only kick in when more than 10 stack elements are required.


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: sim update }
Date{ 2006-7-18 }
P{
The 1 year of alife sim continues. The nice thing about the "no cost" stack that was introduced, is it looks like it makes the simulations less prone to "dying out". The no cost stack, gives each cell 10 free stack elements. This gives each cell a bit of breathing room, and makes the Evolve4.0 universe less hostile.
It also means the overall population is higher for the same amount of starting energy. Instead of using 200,000 units of energy (for a pop. of 3,000 creatures), I am finding that 80,000 units of energy is sufficient.

Anyway, the sim is running fine, and seems to be stable at a comfortable population of around 3,000. Most creatures are multi-cellular. Around 5 to 10 cells. And each creatures likes to move around in a spiral fashion.

What is really wierd it the genetic program is NOT an infinite loop! Somehow the original infinite loop logic has been relpaced with a recursive call to "main". This has the same effect as an infinite loop, except it ultimately requires more and more energy (and thus death). So these creatures have a limited lifespan. I attribute this change to the introduction of the no cost stack. The no cost stack allows these creatures to recursively call their "main" program without immediately dying. They can reproduce  a couple times before they become energy hogs and die.

This recursive call may be a weierd way to store energy as stack elements (like fat) and when a cell tries to allocate more stack elements than the organism has sufficient energy for, then that cell dies. When the cell dies, its stack elements are converted back into energy. Anyway, this may be more a survival advantage than I at first realized.

I am anxiously waiting for that cool mutation that gives these creatures vision. A stategic LOOK instruction that will endow a creature with a slight advantage over his neighbors.

What does it mean that after billions of births/deaths creatures still aren't LOOK'ing around? This is exactly why I am running this sim for one year. I shall be bummed if after one year this sim exhibits no more complexity than I am seeing now. But even this negative result will give  interesting food for thought.

But I believe a long-term simulation with a  decent population of replicators is something that is needed to fully explore the possibilities of ALIFE.


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Sim update  }
Date{ 2006-7-29 }
P{
Not much new. The sim is running quite nicely. By this I mean, the population stays in a healthy range, and I continue to see new variations. I added some messages to the Evolve 4.0 forum, in which I described some new features I am working on. The main feature that seems cool to me is the "Radioactive Dye Marker". Basically is lets you tag one or more creatures and follow them around (and their offspring). But check out the forum for a full list of things I am thinking of implementing. No time frame, maybe in 1 month time.
I realized that my linux box is a 6 year old machine. For $600 I can pick up a used PC which runs at about three times the speed of this box. So probably in the very near future I will be upgrading the linux box to run this sim. This will mean that the "one year of alife" sim will be able to simulate in one year what would have taken the existing PC three years to compute.

(I'm looking at used-pcs.com, and wanting to get a Pentium 4 hyperthread CPU running at 3Ghz; my existing box, it turns out, is only 1.0Ghz)

Right now the sim is at 73 million steps. The average generation is about 730,000. Meaning each creature has about 730,000 ancenstors. The number of creatures born is 3.3 billion.

}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Current genetic program }
Date{ 2006-7-30 }
P{
Here's a DNA example from today's sim:
B{

Code<<_EOF_
main:
{
      9  call  1  call  9  call  2  call  call  71 
}

row1:
{
      HAS-NEIGHBOR  118  OMOVE  EAT  OMOVE  EAT  EAT  OMOVE  3
      GROW  OMOVE  EAT  EAT  EAT  EAT  OMOVE  OMOVE  OMOVE  EAT
      OMOVE  EAT  OMOVE  EAT 
}

row2:
{
      -72  -21  -52  OMOVE  EAT  and  OMOVE  EAT  MOOD  OMOVE
      ?loop  EAT  EAT  EAT 
}

row3:
{
     
}

row4:
{
     
}

row5:
{
     
}

row6:
{
     
}

row7:
{
      74  46  10  R0  -3  2dup  -36  0=  R5  LOOK-SPORE  OMOVE
      *  10  2pop  2dup  R4!  R8!  EAT  -11  42  unpack2  -26
      72  12  xor  -58  &lt;&gt;  negate  97  64 
}

row8:
{
      GROW  64  R4! 
}

row9:
{
      ENERGY  6  /  R0!  -8  R9  R0  MAKE-SPORE  -2  0  R0  MAKE-SPORE
      OMOVE  2  R3  GROW  GROW  / 
}

row10:
{
      2over  -64  -5 
}

row11:
{
     
}

row12:
{
      HAS-NEIGHBOR  R1  EAT  OMOVE  6  *  R2  R0!  EAT  EAT  EAT
      tuck  MOOD!  OMOVE  EAT  over  EAT 
}

row13:
{
     
}

row14:
{
      -81 
}

row15:
{
      LOOK-SPORE 
}

row16:
{
      nip  47  -60  -94 
}

row17:
{
      negate  -99  R8  R8  R8!  62  min 
}

row18:
{
     
}

row19:
{
      ENERGY  if  -65  13  /  -35  HAS-NEIGHBOR  LOOK  OMOVE
      EAT  82  &lt;=  dup  -57  2*  MOOD  dup  -57  2*  LOOK-CELL
      56  63 
}

row20:
{
     
}

row21:
{
      R4!  tuck  &lt;&gt;  AGE 
}

row22:
{
     
}

row23:
{
      -43 
}

row24:
{
      /  R1  /  R1  83 
}

row25:
{
     
}

row26:
{
      -4 
}

row27:
{
      -33  /mod 
}

_EOF_

}


}
}

//{ ====================================================================== }

Blog{
Title{ Evolve 4.0 Forum Closed }
Date{ 2007-7-1 }
P{
I didn't renew my Invision board and so the Evolve forum is no longer in existence. I just want to thank all those who participated. Your feedback and comments helped make Evolve a better program. I really enjoyed the discussions, unfortunately the time and cost involved were too much for me.
Please use email or this blogs comments to continue any discussions regarding evolve4.0


}
}

//{ ====================================================================== }

Blog{
Title{ Evolve 4.8e released }
Date{ 2007-7-1 }
P{
A new version of evolve has been released. The only change is the merge operation for sexual reproduction has been changed. A random bit string is selected and this controls which parent donates the code block(s) to the offspring.
In previous versions and odd/even scheme was used. New new method has been shown to result in much better XY simulations, which are more stable and give interesting creatures.


}
}

//{ ====================================================================== }

Blog{
Title{ One Year of Alife Restarted }
Date{ 2007-7-5 }
P{
I restarted the "1 year of alife" simulation. The previous simulation ran for 200 days and gave boring results. But that's good. Any result is a good result. I have been playing with XY simulations (sexual reproduction), and have restarted the project using the XY sim mode.
By "boring" I mean the simulation lacked the variety of creatures. And also over time the behaviors of the creatures didn't seem to get smarter (they stayed the same for months). There could be several reasons for this. One reason is the simple 2-dimensional grid may not offer much room for intellegent behavior. So the creatures that evolved were probably highly optimal for this kind of simple world. Another reason could be the asexual reproduction is too slow??? I don't know.

Anyway, this new simulation will show the difference between a sexually reproducing ecosystem from an asexual one.

}
}

//{ ====================================================================== }

Blog{
Title{ The Evolve 4.0 Discsussion Group }
Date{ 2007-7-8 }
P{
Using google groups, I created a discussion group for the Evolve 4.0 software. It's not as fancy as the Invision board, but its free!
Here's the access link:


[url=http://groups.google.com/group/evolve-40-discussion]http://groups.google.com/group/evolve-40-discussion[/url] 

My thanks to 'scood' for the idea. It looks like google groups lets us handle stuff like file uploads etc... Let's make this as good as the previous forum was. Cheers, Ken


}
}

//{ ====================================================================== }

Blog{
Title{ one year of alife restarted }
Date{ 2007-7-17 }
P{
one year of alife restarted. sim is bigger 1500 x 1000 and has less barriers and has a little more energy than before. This one has a larger population (1,500) instead of the previous one which had barely 400 organisms.

}
}

//{ ====================================================================== }

Blog{
Title{ Evolve 4.0 Server }
Date{ 2007-7-17 }
P{
I am thinking of creating an Evolve4 server. It will be a special kind of batch simulation which allows new creatures to be added at any time, and snapshots/statistics of the current simulation to be obtained at anytime. It will allow multiple strand. An unlimited number of strands - not just 8.
The idea is to let users submit a KFORTH creature and see how it does in the always running Evolve4 ecosystem. It would combine the qualities of darwinbots FTP server and the technosphere project.

This Evolve4 Server would allow more people to test out thier hand written KFORTH (or evolve KFORTH) to see how great (or sucky) the creatures are. Special servers could be started up for regular competitions, etc...

The "One Year of Alife" would become a special case of this server mechanims.

}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Status Report }
Date{ 2007-7-28 }
P{
The current "one-year-of-alife" simulation looks good to me. The population is right where I like it to be (more than 1,000 and less than 3,000). The creatures have nice fluid motion and are small blobs. They seem to exhibit some rudimentary evasion and hunting routines. And best of all this is a sexual simulation.
Overall I am happy with this new simulation (knock on wood; funny if todays sim died out or some other similar tradgedy)


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: New machine! }
Date{ 2006-8-5 }
P{
So I wanted something faster to run One Year Of Alife... I went to startechpc.com (a local austin company) and bought a used PC for $500. It is over twice as fast as the previous machine. The funny thing is, it is one of those bullshit tricked out weenie machines that game playing fags use!!! You know, the ones with a clear plastic window showing the internals and various LED lights and neon plastic crap.
What's funny is I always laughed at those pimped out, over clocked machines. And I laughed at the stupidity of the owners of such machines. But, now I am the owner of such a  pimped out PC!!! Check it out:

[url=http://www.stauffercom.com/alife/cpu.jpg]Ken's Pimped Out Alife box[/url] (the old ALIFE box is shown in the background)

Anyway, the old box was giving me about 35 steps per seconds, this new machine is giving 81 steps per second.

It's a 2.2 Ghz, AMD Athlon 3200+, running SuSe Linux 9.3

}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Vision Evolves }
Date{ 2006-8-10 }
P{
Somewhere around day 30 and 32 some LOOK instructions became a universal feature of all the organisms. When I trace thru the code these LOOK instructions are actually being used. Immediately after the LOOK instruction is a OMOVE instruction. This causes the organism to move differently depending on what it sess. The LOOK arguments are like "0 1", which means the organism is looking at an adjacent square.


Code<<_EOF_
main:
{
      9  call  1  call  9  call  2  call  call  6  Rn  51  R5!
      -37  1-  &lt;&gt;  R9!  R2!  &lt; 
}

row1:
{
      HAS-NEIGHBOR  105  OMOVE  EAT  OMOVE  EAT  EAT  OMOVE  ?dup
      GROW  OMOVE  EAT  EAT  -26  EAT  OMOVE  OMOVE  OMOVE  EAT
      [b]LOOK-CELL[/b]  OMOVE  EAT  OMOVE  EAT 
}

row2:
{
      -13  -76  -50  OMOVE  EAT  [b]LOOK-SPORE[/b]  OMOVE  EAT  MOOD
      OMOVE  ?loop  EAT  -49  OMOVE  EAT  -39  OMOVE  EAT  [b]LOOK-SPORE[/b] 
}

...
_EOF_


}
}

//{ ====================================================================== }

Blog{
Title{ Why Sex? }
Date{ 2007-8-4 }
P{
Why do we have sex? I mean from an evolutionary point of view. Why is there a process in which male and female variants merge genetic material in the creation of offspring? Bacteria just split two equal copies (with mutations) in order to replicate.
This great puzzle of biology is the topic of this blog post.

I am currently dabbling with a new hypothesis. Everyone assumes that asexual replication was first, then sexual replication emerged at a later time. [b]What if this view is backwards? What if sexual replication came first? And asexual reproduction emerged later?[/b]

Maybe the genesis of life on earth consisted of a catalyst-like chemical reaction where two interacting chemicals were needed. A male chemical and a female chemical which somehow interacted to produce more of both.

Anyway, I'm sure there's lots of readily available facts to refute this hypothesis. I'll consult google and see.


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Status report }
Date{ 2007-8-11 }
P{
Some energy hogs located near the fish mouth caused the population to plummet to around 600 organisms. Day 27 has overcome the energy hogs and now the population has increased to around 1,300 organisms. I like this simulation a lot. It is much more interesting than all that I have tried in the past. I like the mobility of the creatures and the moderate intelligence I am seeing. Also the simulation varies from day to day which makes it fun to check on the progress.
I think there are three reasons for why this sim is a good one:

(1) it is an XY simulation (all creatures reproduce sexually)

(2) The grid size is very large and open.

(3) Max. Apply is set to 10 (previously this was always set to 1). A bigger [b]Max. Apply[/b] increases the amount of tinkering that the mutation process may cause to a offspring. There's a better chance for a moderate "macro mutation". (See the section on mutations to learn what Max. Apply does)

}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: The 'Fuck You' organism evolves!!! }
Date{ 2007-8-19 }
P{
OMFG! I am being told to fuck off, by the first instance of evolved artifical sarcasm. day-0035.evolve is filled with these organisms:
 [img=http://www.stauffercom.com/images/fuq.gif]
[i]the "fuck you" creature[/i]

}
}

//{ ====================================================================== }

Blog{
Title{ 3D programming help }
Date{ 2007-8-19 }
P{
In 3D perspective mode the simulation is pretty fast for grid sizes like 700 x 600. But when viewing the current [b]one year of alife[/b] files it is kind of slow. The reason isn't because of the large number of creatures. The reason is I must iterate over all grid locations to find the spores and organic material. (Barries are precomputed as they never change). Organisms/cells are stored in linked lists and are easily accessed without having to iterate over all the grid locations.
What I need help with is a smart clipping algorithm to reduce the region I iterate over on the Evolve plane.

I already perform what is called frustum view culling. That means, given an Evolve object I can get determine if it is "in view" or not. The greatly reduces the size and time spent building the OpenGL object lists.

But unfortunately to find the organic material and spores I must iterate over the Evolve grid. This gets slow when the size is large like 1,500 by 1,500.

What I need is a set of 3D vector math equations to do the following:

[i]Give me the smallest bounding box on the evolve plane that is intersected by the current camera view (the view frustum)[/i]
 
Using this bounding box I can shrink the amount of iteration I must perform when the user is only looking at a small part of the grid. I tried to write my own, but it was tricky and never succeeded.

If some whiz 3D hackor can give me this, I can make the 3D mode faster irrspective of the grid size (for the cases then the user is looking at just a small part of the universe).


Pretty pictures and introduction on frustum culling:

[url=http://www.lighthouse3d.com/opengl/viewfrustum]http://www.lighthouse3d.com/opengl/viewfrustum[/url] 


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Invision evolve4 forum has returned }
Date{ 2007-8-22 }
P{
The old Evolve forum is back!!! It is an Invision Power Board and all your old passwords and logins will work.

Just go here:

   [url=http://evolve4.invisionzone.com/]http://evolve4.invisionzone.com/[/url] 


}
}

//{ ====================================================================== }

Blog{
Title{ ALIFE: Status report }
Date{ 2007-9-6 }
P{
Day 54 is a refreshing change from the last week or so. The arrowhead shaped creatures have been replaced with a square shaped creature. I examined day 53, and it shows mostly arrowhead shaped organisms. So something in the last 24 hours has occured to cause all arrowhead shaped organisms to be replaced with the square ones. They don't appear to be especially more fit than the ones they replaced. But the improvement doesn't need to be super great for it to totally take over the entire gene pool.

}
}

//{ ====================================================================== }

Blog{
Title{ Restarting One Year of Alife }
Date{ 2006-12-30 }
P{
Well after 85 days of simulation (longest yet). I decided to restart the simulation using the latest software. The latest code is version 4.7. It contains many improvements suggested by the handful of users who post on the Evolve forum.
Changes:

  * EAT instruction takes an (x, y) offset.

  * CMOVE instruction has no restrictions (as long as creature is properly connected after the move)

  * ROTATE instruction added

  * spore fertilization can be accomplished with zero units of energy (before it had to be atleast 1).

  * A few changes to the interface.

  * The "free" stack elements each cell gets has been increased from 10 to 50.

  * Deletion probability default changed from 6% to 8%

  * GROW instruction changed to include a 3rd argument (the code block to jumo to for the new cell)



}
}
